---
title: "Solar Radiation"
format: html
editor: visual
bibliography: references.bib
---

```{r}
library(azmetr)
library(tidyverse)
library(units)
daily <- az_daily(start_date = "2022-01-01", end_date = "2023-01-01")
hourly <- az_hourly(start_date_time = "2022-04-15 00", end = "2022-04-17 00") |> 
  mutate(date_datetime = floor_date(date_datetime - seconds(1), unit = "hours"))

daily <- daily |> az_add_units()
hourly <- hourly |> az_add_units()
```

Looking for MJ/m^2^ or possibly W/m^2^ which includes time in the denominator

```{r}
(daily$sol_rad_total[1] / set_units(1, "d") )|> set_units("W/m^2")
```

## Parameter estimates

We can get a bunch of data about solar radiation with `fishmethods::astrocalc4r()` .
Unfortunately, total solar radiation is not one of them.
The help file for the function instructs the reader to modify the code to calculate total solar radiation!

> `astrocalc4r` calculates PAR for wavelengths between 400-700 nm.
> Calculations for other wavelengths can be carried out by modifying the code to use parameters from Frouin et al. (1989).

So, that's what I did below using the coefficients from tables 1 and 2 of @frouin.

```{r}
# library(fishmethods)
source("../app/R/astrocalc4r.R")

hourly_sol <- 
  hourly |> 
  left_join(station_info) |> 
  add_column(tz = -7) |> 
  reframe(
    astrocalc4r(
      day = mday(date_datetime),
      month = month(date_datetime),
      year = year(date_datetime),
      hour = hour(date_datetime) + 0.5, #we want solar radiation for the middle of the previous hour, I guess?
      # hour = ((date_datetime |> as_hms() |> as.numeric())/3600) - 0.5,
      timezone = tz,
      lat = latitude,
      lon = longitude,
      withinput = FALSE,
      seaorland = "continental"
    )
  ) 

hourly_sol <- 
  hourly |> 
  select(meta_station_id,
    meta_station_name,
    date_datetime,
    date_doy,
    sol_rad_total) |> 
  bind_cols(hourly_sol) |> 
  rename(sol_rad_max = TOT, par = PAR) |> 
  mutate(sol_rad_max = set_units(sol_rad_max, "lx"), par = set_units(par, "lx"))
```

## Total Solar Radiation

This gives us an hourly total solar radiation maximum in units of lux, which are approximately equal to W/m^2^ for sunlight.

```{r}
sunlight <- set_units(1, "(W/m^2) / lx")

hourly_sol <- 
  hourly_sol |> 
  mutate(sol_rad_max = sol_rad_max * sunlight) |> 
  mutate(sol_rad_max = set_units(sol_rad_max, "MJ m-2 hr-1") * set_units(1, "hr"))
```

Now we can plot this maybe

```{r}
hourly_sol |> 
  ggplot(aes(x = date_datetime)) +
  geom_line(aes(y = sol_rad_total)) +
  geom_line(aes(y = sol_rad_max), color = "red") +
  facet_wrap(~meta_station_id)

hourly_sol |> 
  filter(sol_rad_total > sol_rad_max) |> 
  mutate(d_sol = sol_rad_total - sol_rad_max) |> 
  select(meta_station_id, date_datetime, sol_rad_total, sol_rad_max, d_sol) |> 
  arrange(desc(d_sol))
```

Hmm... looks phase-shifted.
Maybe its off by an hour or something?

## Modify for daily

The above code gives hourly max solar radiation, but we want to use this for the daily data as well, so we should be able to just sum by day.

```{r}
hourly_sol |> 
  mutate(date = floor_date(date_datetime, "day")) |> 
  group_by(date, meta_station_id) |> 
  summarise(
    sol_rad_total = sum(sol_rad_total)
  )
```

We want to avoid having to get hourly data to validate daily data though so let's actually not use this approach.
Let's start with daily data.

```{r}
source("../app/R/astrocalc4r.R")
daily <- left_join(daily, station_info)

daily_expand <-
  daily |> 
  select(meta_station_id, datetime, latitude, longitude) |> 
  expand_grid(hour = 0:23) |> 
  mutate(date_datetime = datetime + hours(hour)) |> 
  add_column(tz = -7) 

daily_sol_hr <- 
  daily_expand |>
  reframe(
    astrocalc4r(
      day = mday(date_datetime),
      month = month(date_datetime),
      year = year(date_datetime),
      hour = hour(date_datetime),
      timezone = tz,
      lat = latitude,
      lon = longitude,
      withinput = FALSE,
      seaorland = "continental"
    )
  ) |> bind_cols(daily_expand) 


daily_sol <- daily_sol_hr |> 
  summarize(sol_rad_max = sum(TOT),
            .by = c(datetime, meta_station_id)) |> 
  mutate(sol_rad_max = set_units(sol_rad_max, "lx")) |> 
  mutate(sol_rad_max = sol_rad_max * sunlight) |> 
  mutate(sol_rad_max = set_units(sol_rad_max, "MJ m-2 h-1") * set_units(1, "h"))

daily <- left_join(daily, daily_sol) 

daily |> 
  ggplot(aes(x = datetime)) +
  facet_wrap(~meta_station_id) +
  geom_line(aes(y = sol_rad_total)) +
  geom_line(aes(y = sol_rad_max), color = "red")

daily |> filter(sol_rad_total > sol_rad_max) |> 
  select(starts_with("sol"))

```

# `TrenchR`

The `TrenchR` package provides some functions for solar radiation

```{r}
library(TrenchR)

# some functions aren't vectorized
# vectorize azimuth angle
azimuth_angle2 <- function(doy, lat, lon, hour, offset = NA) {
  purrr::pmap_dbl(list(doy, lat, lon, hour, offset), azimuth_angle)
}

# outputs stupid vector
sol_rad_total <- function(doy, psi, tau, elev, rho) {
  purrr::pmap(list(doy, psi, tau, elev, rho), solar_radiation) |> 
    purrr::map_dbl(\(x) sum(x[c(1, 2)])) #just direct and diffuse?
}

hourly_sol <-
  hourly |>
  left_join(station_info) |>
  select(meta_station_id, date_datetime, latitude, longitude) |>
  mutate(doy = yday(date_datetime)) |>
  mutate(hour = hour(date_datetime) + 0.5) |> #shift to middle of hour??
  mutate(
    dec_angle = dec_angle(doy),
    zenith_angle = zenith_angle(
      doy,
      lat = latitude,
      lon = longitude,
      hour = hour,
      offset = -7
    ),
    # solar_noon = solar_noon(lon = longitude, doy = doy, offset = -7),
    # azimuth_angle = azimuth_angle2(
    #   doy = doy, 
    #   lat = latitude,
    #   lon = longitude,
    #   hour = hour,
    #   offset = -7
    # ),
    # daylength = daylength(latitude, doy),
    # air_pressure = airpressure_from_elev(elev),
    # air_pressure = airpressure_from_elev(1000),
    solar_rad = sol_rad_total(
      doy,
      psi = zenith_angle * 2 * pi / 360,
      tau = 1, #atmospheric transmissivity, not sure how to estimate
      # elev = elev,
      elev = 1000,
      rho = 1 #albedo, not sure how to estimate, but probably high??
    ) |> set_units("W m-2")
  ) 

hourly_df <-
  left_join(hourly,
            hourly_sol |> select(meta_station_id, date_datetime, solar_rad)) |>
  mutate(sol_rad_total = (sol_rad_total / set_units(1, "hr")) |> set_units("W m-2")) 

hourly_df |>
  filter(sol_rad_total > solar_rad) |>
  select(date_datetime, sol_rad_total, solar_rad) |> 
  mutate(hour = hour(date_datetime)) |>
  count(hour)

#only fucked up in mornings and evenings.  whyyyyy
  

ggplot(hourly_df, aes(x = date_datetime)) +
  geom_line(aes(y = sol_rad_total)) +
  geom_line(aes(y = solar_rad), color = "red") +
  facet_wrap(~meta_station_id)



```

If I set albedo to 1 and transmissivity to 1, it does a pretty good job only flagging 11 rows.
Questions for Jeremy:

-   Can we get elveation data for sites (if not, can probably look it up based on lat/lon) (elev doesn't seem to matter much though)

-   Is sensor getting direct, diffused, reflected solar radiation or just a subset of those?
